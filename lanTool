#!/bin/bash

help()
{
   cat << HELP
Language convert tool
    
    This tool convert Excle to lua file, or reverse
    Tool need python and lua 5.3.

EXAMPLE:
    LanguageTool -m -o Text.xls -d Out
        update Text.xls and app language files, Save them to Out
    LanguageTool -l en -o Text.xls -d Out
        From *.xls read txt, and convert to *.lua, Save to Out
        This is English Language Pag
    LanguageTool -c -o Text.xls
        compare Text.xls with project language
OPTION:
    -h Help document
    -t clear temp file,
    -c compare mode, compare Excle file with project language, output to Text_comp
    -m if use this option, Tool will update current Language files,
        if not, just save lua file from xls
    -a  export (batch Processing)
    -o origin file, only *.xls file can be use
    -d save files dir, if exist, it will be remove, if not exist, it will be create
    -l convert Language, save file extension
HELP
   exit 0
}

# check error
check()
{
    if [ $? -ne 0 ]; then
        echo "something happened, exit!"
        exit 0
    fi
}

# clear temp file sign, if 1 clear, other value not 
CLEARTEMP=0

mode=0
originFile="Text.xls"
targetDir="Out"
language="cn"

# get opts
while getopts "htmcao:d:l:" arg
do
    case $arg in
        h) help ;;
        m) mode=1;;
        t) CLEARTEMP=1;;
        c) mode=2;;
        a) mode=3;;
        o) originFile="$OPTARG";;
        d) targetDir="$OPTARG";;
        l) language="$OPTARG";;
        ?) echo "unknown argument. -h for help"; exit 1;;
    esac
done

# origin file
if ! [ -f "$originFile" ]; then
    echo "$originFile not exist"
    exit 1
fi

# output dir
if [ -d "$targetDir" ]; then
    if [ 1 == $CLEARTEMP ]; then
        echo "clear $targetDir"
        rm -r "$targetDir"
        mkdir "$targetDir"
    fi
else
    if [ "/" != ${targetDir:0:1} ]; then
        targetDir=$(pwd)/$targetDir
    fi
    echo "create dir $targetDir"
    mkdir "$targetDir"
fi

function makeOutDir()
{
    # targetDir + language
    saveDir="$targetDir/$1"
    if [ -d "$saveDir" ]; then
        if [ 1 == $CLEARTEMP ]; then
            echo "clear $saveDir"
            rm -r "$saveDir"
            mkdir "$saveDir"
        fi
    else
        if [ "/" != ${saveDir:0:1} ]; then
            saveDir=$(pwd)/$saveDir
        fi
        echo "create dir $saveDir"
        mkdir "$saveDir"
    fi
}

# temp dir
temp="temp"
if [ -d "$temp" -a 1 == $CLEARTEMP ]; then
    rm -r "$temp"
fi

if [ ! -d "$temp" ]; then
    mkdir "$temp"
fi

makeOutDir $language

# tempFile
tem2Lua="$temp/languageFromExcel.lua"
tem2Xls="$temp/srcLanguage.lua"
temComp="$temp/languageComp.lua"
lua_xls="$temp.languageFromExcel"
py_xls="$saveDir/Text.xls"
py_comp="$saveDir/Text_comp.xls"

# Language ext config
typeset -a xlsFiles
typeset -a languageExt
xlsFiles+=("Text")
languageExt+=("cn")
xlsFiles+=("Text_ES")
languageExt+=("es")
xlsFiles+=("Text_En")
languageExt+=("en")
xlsFiles+=("Text_Fr")
languageExt+=("fr")
xlsFiles+=("Text_Ge")
languageExt+=("gr")
xlsFiles+=("Text_PT")
languageExt+=("pt")
xlsFiles+=("Text_Ru")
languageExt+=("ru")
xlsFiles+=("Text_TR")
languageExt+=("tr")

function fun1()
{
    python src/Excel2Lua.py $1 $tem2Lua 
    check
    lua src/main.lua 0 $lua_xls $saveDir $2
    check
}

if [ 0 == $mode ]; then
    fun1 $originFile $language
elif [ 1 == $mode ]; then
    lua src/main.lua $mode $tem2Xls
    check
    python src/Lua2Excel.py $tem2Xls $py_xls
    check
elif [ 2 == $mode ]; then
    lua src/main.lua 2 "-" $temComp
    check
    python src/Lua2Excel.py $temComp $py_comp
    check
elif [ 3 == $mode ]; then
    for VAR in `ls Text*`
    do
        for((i=0;i<${#xlsFiles[@]};i++));
        do
            if [ "${VAR%.xls}" = "${xlsFiles[$i]}" ];
            then
                makeOutDir ${languageExt[$i]}
                check
                fun1 $VAR ${languageExt[$i]}
                break 
            fi
        done
    done
fi

if [ 1 == $CLEARTEMP ]; then
    rm -r "$temp"
fi

echo "All thing has Done"
#echo "Press Any Key To Exit"
#read -s -n 1
